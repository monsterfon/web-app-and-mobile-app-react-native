import React, { useState, useEffect } from "react";
import { View, StyleSheet, Image, ScrollView, TextInput, Text, Alert, Modal, FlatList, TouchableOpacity, TouchableHighlight } from "react-native";
import * as ImagePicker from "expo-image-picker";
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Video } from 'expo-av';

const CustomButton = ({ title, onPress, style }) => (
  <TouchableHighlight style={[styles.button, style]} onPress={onPress} underlayColor="#DDDDDD">
    <Text style={styles.buttonText}>{title}</Text>
  </TouchableHighlight>
);

const App = () => {
  const [items, setItems] = useState<(string | { type: "text"; content: string })[]>([]);
  const [text, setText] = useState<string>("");
  const [timeInput, setTimeInput] = useState<string>("");
  const [title, setTitle] = useState<string>("");
  const [time, setTime] = useState<string>("");
  const [modalVisible, setModalVisible] = useState<boolean>(false);
  const [textModalVisible, setTextModalVisible] = useState<boolean>(false);
  const [timeModalVisible, setTimeModalVisible] = useState<boolean>(false);
  const [savedTimelines, setSavedTimelines] = useState<{ key: string; time: string; image?: string }[]>([]);
  const [showOptions, setShowOptions] = useState<boolean>(true);
  const [backgroundColorIndex, setBackgroundColorIndex] = useState<number>(0);
  const backgroundColors = [ "#FFFFFF", "#FFB6C1",   "#FFA07A",  "#98FB98",  "#FFDAB9",  "#E6E6FA",  "#F0E68C",  "#D3D3D3",  "#F5F5DC",  "#FFFACD",  "#AFEEEE",  "#E0FFFF", "#FAFAD2", "#FFF0F5", "#FFE4E1", ];

  const pickImage = async () => {
    try {
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        quality: 1,
      });

      if (!result.canceled) {
        setItems([...items, result.assets[0].uri]);
      } else {
        console.log("User canceled image picker");
      }
    } catch (error) {
      console.error("Error picking image: ", error);
    }
  };

  const pickVideo = async () => {
    try {
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Videos,
        allowsEditing: true,
        quality: 1,
      });

      if (!result.canceled) {
        setItems([...items, result.assets[0].uri]);
      } else {
        console.log("User canceled video picker");
      }
    } catch (error) {
      console.error("Error picking video: ", error);
    }
  };

  const handleAddText = () => {
    if (text.trim() !== "") {
      if (!title) {
        setTitle(text);
      } else {
        setItems([...items, { type: "text", content: text }]);
      }
      setText("");
      setTextModalVisible(false);
    }
  };

  const handleAddTime = () => {
    if (timeInput.trim() !== "") {
      setTime(timeInput);
      setTimeInput("");
      setTimeModalVisible(false);
    }
  };

  const saveTimeline = async () => {
    try {
      const dataToSave = { title, time, items };
      const titleForSave = title || "untitled";
      await AsyncStorage.setItem(`T_${titleForSave}_`, JSON.stringify(dataToSave));
      Alert.alert("Success", "Your timeline has been saved!");
      loadSavedTimelines();
    } catch (error) {
      console.error("Error saving the timeline: ", error);
      Alert.alert("Error", "There was an issue saving your timeline.");
    }
  };

  const loadSavedTimelines = async () => {
    try {
      const keys = await AsyncStorage.getAllKeys();
      const savedTimelineKeys = keys.filter(key => key.startsWith("T_"));

      const timelines = await Promise.all(
        savedTimelineKeys.map(async (key) => {
          const data = await AsyncStorage.getItem(key);
          if (data) {
            const { time, items } = JSON.parse(data);
            const image = items.find((item: any) => typeof item === "string" && (item.includes("http") || item.startsWith("file://")));
            return { key, time, image };
          }
          return { key, time: "", image: undefined };
        })
      );

      // Sort timelines by time in descending order
      timelines.sort((a, b) => {
        const [dayA, monthA, yearA] = a.time.split('.').map(Number);
        const [dayB, monthB, yearB] = b.time.split('.').map(Number);
        const dateA = new Date(yearA, monthA - 1, dayA);
        const dateB = new Date(yearB, monthB - 1, dayB);
        return dateB.getTime() - dateA.getTime();
      });

      setSavedTimelines(timelines);
    } catch (error) {
      console.error("Error loading saved timelines: ", error);
      Alert.alert("Error", "There was an issue loading saved timelines.");
    }
  };

  const loadTimeline = async (key: string) => {
    try {
      const savedData = await AsyncStorage.getItem(key);
      if (savedData) {
        const { title: savedTitle, time: savedTime, items: savedItems } = JSON.parse(savedData);
        setTitle(savedTitle || "");
        setTime(savedTime || "");
        setItems(savedItems || []);
        setModalVisible(false);
      } else {
        Alert.alert("No Saved Timeline", "This timeline could not be loaded.");
      }
    } catch (error) {
      console.error("Error loading the timeline: ", error);
      Alert.alert("Error", "There was an issue loading your timeline.");
    }
  };

  const clearTimeline = () => {
    setTitle("");
    setTime("");
    setItems([]);
    Alert.alert("Cleared", "Your timeline has been cleared.");
  };

  const deleteAllStorage = async () => {
    try {
      await AsyncStorage.clear();
      setSavedTimelines([]);
      Alert.alert("Deleted", "All saved timelines have been deleted.");
    } catch (error) {
      console.error("Error deleting AsyncStorage: ", error);
      Alert.alert("Error", "There was an issue deleting all timelines.");
    }
  };

  const changeBackgroundColor = () => {
    setBackgroundColorIndex((prevIndex) => (prevIndex + 1) % backgroundColors.length);
  };

  useEffect(() => {
    loadSavedTimelines();
  }, []);

  return (
    <View style={[styles.container, { backgroundColor: backgroundColors[backgroundColorIndex] }]}>
      <CustomButton title={showOptions ? "Hide" : "•••"} onPress={() => setShowOptions(!showOptions)} />
      {showOptions && (
        <>
          <CustomButton title="Search Timeline" onPress={() => setModalVisible(true)} />
          <CustomButton title="Add Text" onPress={() => setTextModalVisible(true)} />
          <CustomButton title="Add Time" onPress={() => setTimeModalVisible(true)} />
          <CustomButton title="Choose an Image" onPress={pickImage} />
          <CustomButton title="Add Video" onPress={pickVideo} />
          <CustomButton title="Save Experience" onPress={saveTimeline} />
          <CustomButton title="Clear Screen" onPress={clearTimeline} />
          <CustomButton title="Delete All Experience" onPress={deleteAllStorage} />
          <CustomButton title="Change Color" onPress={changeBackgroundColor} />
        </>
      )}

      <Modal visible={modalVisible} animationType="slide" onRequestClose={() => setModalVisible(false)}>
        <View style={styles.modalContainer}>
          <Text style={styles.modalTitle}>Select a Saved Timeline</Text>
          <FlatList
            data={savedTimelines}
            keyExtractor={(item) => item.key}
            renderItem={({ item }) => (
              <TouchableOpacity onPress={() => loadTimeline(item.key)}>
                <View style={styles.savedTimelineItem}>
                  {item.image && <Image source={{ uri: item.image }} style={styles.thumbnail} />}
                  <View>
                    <Text style={styles.fileName}>{item.key.replace(/T_|_/g, "")}</Text>
                    <Text style={styles.fileTime}>{item.time}</Text>
                  </View>
                </View>
              </TouchableOpacity>
            )}
          />
          <CustomButton title="Close" onPress={() => setModalVisible(false)} />
        </View>
      </Modal>

      <Modal visible={textModalVisible} animationType="slide" onRequestClose={() => setTextModalVisible(false)}>
        <View style={styles.modalContainer}>
          <Text style={styles.modalTitle}>Enter Text</Text>
          <TextInput
            style={styles.input}
            placeholder="Enter text here"
            value={text}
            onChangeText={setText}
          />
          <CustomButton title="Add" onPress={handleAddText} />
          <CustomButton title="Cancel" onPress={() => setTextModalVisible(false)} />
        </View>
      </Modal>

      <Modal visible={timeModalVisible} animationType="slide" onRequestClose={() => setTimeModalVisible(false)}>
        <View style={styles.modalContainer}>
          <Text style={styles.modalTitle}>Enter Time</Text>
          <TextInput
            style={styles.input}
            placeholder="Enter time here"
            value={timeInput}
            onChangeText={setTimeInput}
          />
          <CustomButton title="Add" onPress={handleAddTime} />
          <CustomButton title="Cancel" onPress={() => setTimeModalVisible(false)} />
        </View>
      </Modal>

      <ScrollView style={styles.scrollContainer}>
        {title ? (
          <View style={styles.textBlock}>
            <Text style={styles.titleText}>{title}</Text>
          </View>
        ) : null}
        {time ? (
          <View style={styles.textBlock}>
            <Text style={styles.text}>{time}</Text>
          </View>
        ) : null}
        {items.map((item, index) => {
          if (typeof item === "string" && (item.includes("http") || item.startsWith("file://"))) {
            if (item.endsWith(".mp4") || item.endsWith(".mov")) {
              return (
                <View key={index} style={[styles.videoBlock, { alignSelf: index % 2 === 0 ? "flex-start" : "flex-end" }]}>
                  <Video
                    source={{ uri: item }}
                    rate={1.0}
                    volume={1.0}
                    isMuted={false}
                    resizeMode="cover"
                    shouldPlay
                    isLooping
                    style={styles.video}
                  />
                </View>
              );
            } else {
              return (
                <View key={index} style={[styles.imageBlock, { alignSelf: index % 2 === 0 ? "flex-start" : "flex-end" }]}>
                  <Image source={{ uri: item }} style={styles.image} />
                </View>
              );
            }
          } else if (typeof item === "object" && item.type === "text") {
            return (
              <View key={index} style={[styles.textBlock, { alignSelf: index % 2 === 0 ? "flex-start" : "flex-end" }]}>
                <Text style={styles.text}>{item.content}</Text>
              </View>
            );
          } else {
            return null;
          }
        })}
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#f4f4f4",
    padding: 20,
  },
  scrollContainer: {
    marginTop: 20,
    width: "100%",
    paddingHorizontal: 10,
  },
  imageBlock: {
    marginBottom: 20,
  },
  image: {
    width: 250,
    height: 250,
    borderRadius: 10,
  },
  videoBlock: {
    marginBottom: 20,
  },
  video: {
    width: 250,
    height: 250,
    borderRadius: 10,
  },
  input: {
    width: "80%",
    height: 40,
    borderColor: "#ccc",
    borderWidth: 1,
    marginTop: 10,
    paddingLeft: 10,
  },
  textBlock: {
    marginBottom: 20,
    alignItems: "center",
  },
  text: {
    fontSize: 20,
    color: "#555",
    marginTop: 10,
    textAlign: "center",
  },
  titleText: {
    fontSize: 28,
    fontWeight: "bold",
    color: "#000",
    marginTop: 10,
    textAlign: "center",
  },
  modalContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
    backgroundColor: "white",
  },
  modalTitle: {
    fontSize: 18,
    marginBottom: 20,
  },
  savedTimelineItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 15,
    backgroundColor: "#e0f7fa",
    marginBottom: 10,
    borderRadius: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
    elevation: 2,
  },
  fileName: {
    fontSize: 16,
    color: "#007BFF",
    fontWeight: "bold",
  },
  fileTime: {
    fontSize: 14,
    color: "#007BFF",
  },
  thumbnail: {
    width: 50,
    height: 50,
    borderRadius: 5,
    marginRight: 10,
  },
  button: {
    width: 200,
    height: 50,
    backgroundColor: "#007BFF",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 5,
    marginVertical: 5,
  },
  buttonText: {
    color: "white",
    fontSize: 16,
  },
});

export default App;